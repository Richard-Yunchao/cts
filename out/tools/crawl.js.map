{"version":3,"sources":["../../src/tools/crawl.ts"],"names":["fg","fs","path","specSuffix","crawl","suite","specDir","existsSync","console","error","process","exit","specFiles","onlyFiles","groups","file","f","substring","length","endsWith","testPath","mod","push","description","trim","basename","group","readFileSync","makeListing","filename","dirname"],"mappings":"AAAA;AACA;AACA;AAEA;AAEA,OAAOA,EAAP,MAAe,WAAf;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAO,KAAKC,IAAZ,MAAsB,MAAtB;AAIA,MAAMC,UAAU,GAAG,UAAnB;AAEA,OAAO,eAAeC,KAAf,CAAqBC,KAArB,EAAsE;AAC3E,QAAMC,OAAO,GAAG,gBAAgBD,KAAhC;;AACA,MAAI,CAACJ,EAAE,CAACM,UAAH,CAAcD,OAAd,CAAL,EAA6B;AAC3BE,IAAAA,OAAO,CAACC,KAAR,CAAe,kBAAiBH,OAAQ,EAAxC;AACAI,IAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACD;;AAED,QAAMC,SAAS,GAAG,MAAMZ,EAAE,CAACM,OAAO,GAAG,OAAV,GAAoBH,UAArB,EAAiC;AAAEU,IAAAA,SAAS,EAAE;AAAb,GAAjC,CAA1B;AAEA,QAAMC,MAA+B,GAAG,EAAxC;;AACA,OAAK,MAAMC,IAAX,IAAmBH,SAAnB,EAA8B;AAC5B,UAAMI,CAAC,GAAGD,IAAI,CAACE,SAAL,CAAe,CAACX,OAAO,GAAG,GAAX,EAAgBY,MAA/B,CAAV;;AACA,QAAIF,CAAC,CAACG,QAAF,CAAWhB,UAAX,CAAJ,EAA4B;AAC1B,YAAMiB,QAAQ,GAAGJ,CAAC,CAACC,SAAF,CAAY,CAAZ,EAAeD,CAAC,CAACE,MAAF,GAAWf,UAAU,CAACe,MAArC,CAAjB;AACA,YAAMG,GAAG,GAAG,MAAM,OAAQ,SAAQf,OAAQ,IAAGc,QAAS,UAApC,CAAlB;AACAN,MAAAA,MAAM,CAACQ,IAAP,CAAY;AACVpB,QAAAA,IAAI,EAAEkB,QADI;AAEVG,QAAAA,WAAW,EAAEF,GAAG,CAACE,WAAJ,CAAgBC,IAAhB;AAFH,OAAZ;AAID,KAPD,MAOO,IAAItB,IAAI,CAACuB,QAAL,CAAcV,IAAd,MAAwB,YAA5B,EAA0C;AAC/C,YAAMW,KAAK,GAAGV,CAAC,CAACC,SAAF,CAAY,CAAZ,EAAeD,CAAC,CAACE,MAAF,GAAW,aAAaA,MAAvC,CAAd;AACA,YAAMK,WAAW,GAAGtB,EAAE,CAAC0B,YAAH,CAAgBZ,IAAhB,EAAsB,MAAtB,EAA8BS,IAA9B,EAApB;AACAV,MAAAA,MAAM,CAACQ,IAAP,CAAY;AACVpB,QAAAA,IAAI,EAAEwB,KADI;AAEVH,QAAAA;AAFU,OAAZ;AAID,KAPM,MAOA;AACLf,MAAAA,OAAO,CAACC,KAAR,CAAc,wBAAwBM,IAAtC;AACAL,MAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACD;AACF;;AAED,SAAOG,MAAP;AACD;AAED,OAAO,SAASc,WAAT,CAAqBC,QAArB,EAAyE;AAC9E,QAAMxB,KAAK,GAAGH,IAAI,CAACuB,QAAL,CAAcvB,IAAI,CAAC4B,OAAL,CAAaD,QAAb,CAAd,CAAd;AACA,SAAOzB,KAAK,CAACC,KAAD,CAAZ;AACD","sourcesContent":["// Node can look at the filesystem, but JS in the browser can't.\n// This crawls the file tree under src/suites/${suite} to generate a (non-hierarchical) static\n// listing file that can then be used in the browser to load the modules containing the tests.\n\n// tslint:disable: no-console\n\nimport fg from 'fast-glob';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nimport { TestSuiteListingEntry } from '../framework/listing.js';\n\nconst specSuffix = '.spec.ts';\n\nexport async function crawl(suite: string): Promise<TestSuiteListingEntry[]> {\n  const specDir = 'src/suites/' + suite;\n  if (!fs.existsSync(specDir)) {\n    console.error(`Could not find ${specDir}`);\n    process.exit(1);\n  }\n\n  const specFiles = await fg(specDir + '/**/*' + specSuffix, { onlyFiles: true });\n\n  const groups: TestSuiteListingEntry[] = [];\n  for (const file of specFiles) {\n    const f = file.substring((specDir + '/').length);\n    if (f.endsWith(specSuffix)) {\n      const testPath = f.substring(0, f.length - specSuffix.length);\n      const mod = await import(`../../${specDir}/${testPath}.spec.js`);\n      groups.push({\n        path: testPath,\n        description: mod.description.trim(),\n      });\n    } else if (path.basename(file) === 'README.txt') {\n      const group = f.substring(0, f.length - 'README.txt'.length);\n      const description = fs.readFileSync(file, 'utf8').trim();\n      groups.push({\n        path: group,\n        description,\n      });\n    } else {\n      console.error('Unrecognized file: ' + file);\n      process.exit(1);\n    }\n  }\n\n  return groups;\n}\n\nexport function makeListing(filename: string): Promise<TestSuiteListingEntry[]> {\n  const suite = path.basename(path.dirname(filename));\n  return crawl(suite);\n}\n"],"file":"crawl.js"}